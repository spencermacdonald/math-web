[{"C:\\Users\\Admin\\Desktop\\my-app\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\my-app\\src\\components\\MersenneFast.js":"2","C:\\Users\\Admin\\Desktop\\my-app\\src\\components\\Mersenne.js":"3","C:\\Users\\Admin\\Desktop\\my-app\\src\\App.js":"4","C:\\Users\\Admin\\Desktop\\my-app\\src\\reportWebVitals.js":"5"},{"size":500,"mtime":1606947276654,"results":"6","hashOfConfig":"7"},{"size":2639,"mtime":1607104884167,"results":"8","hashOfConfig":"7"},{"size":2141,"mtime":1607104980395,"results":"9","hashOfConfig":"7"},{"size":9322,"mtime":1607120264105,"results":"10","hashOfConfig":"7"},{"size":362,"mtime":1606947276654,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5k96f7",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Desktop\\my-app\\src\\index.js",[],"C:\\Users\\Admin\\Desktop\\my-app\\src\\components\\MersenneFast.js",["24"],"import React, { Component, useState } from \"react\"\r\nimport '../myStyle.css'\r\n\r\nclass MersenneFast extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            num: 2,\r\n            output: \"Waiting on input...\"\r\n        };\r\n    }\r\n\r\n    mersennePrimeFast = (props) => {\r\n        const num=this.state.num;\r\n        var p1 = num\r\n        if (p1 > 30)\r\n        {\r\n            this.setState({\r\n                output: \"Input is too large! Please use n <= 30 due to computational limits.\"\r\n            });\r\n            return; \r\n        }\r\n        if(p1 < 2)\r\n        {\r\n            this.setState({\r\n                output: \"Please enter an n >= 2.\"\r\n            });\r\n            return; \r\n        }\r\n\r\n        if(Number(p1) === 2)\r\n        {\r\n            this.setState({\r\n                output: String(num)+\" is a mersenne prime!\"\r\n            });\r\n            return;\r\n        }\r\n        console.log(\"p1 value is: \"+ String(p1))\r\n        //calculations done here forward\r\n\r\n        var p2 = Math.pow(2, p1) -1;\r\n        console.log(\"p2 value is: \"+ String(p2))\r\n        var next = 4 % p2\r\n        for (let i = 1; i < p1 -1; i++)\r\n        {\r\n            next = (next * next -2)%p2\r\n        }\r\n        console.log(\"next value is: \"+ String(next))\r\n        if(next === 0)\r\n        {\r\n            this.setState({\r\n                output: String(num)+\" is a mersenne prime!\"\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState({\r\n                output: String(num)+\" is not a mersenne prime!\"\r\n            });\r\n            return;\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({num: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <hr />\r\n                <p className=\"output\">This is done using Lucas-Lehmer</p>\r\n                <p className=\"notice\"><u>Please note!</u> This algorithm will only accept n less than 31, due to react's computation of numbers.</p>\r\n                <p className=\"output\"> Number being computed: 2<sup>{this.state.num}</sup>-1</p>\r\n                <input className = \"input\"\r\n                    defaultValue= {2}\r\n                    type=\"number\"\r\n                    value={this.state.value}\r\n                    onChange={this.handleChange}\r\n                    min=\"2\"\r\n                />\r\n                <button className =\"input\" onClick = {this.mersennePrimeFast}>Begin computation</button>\r\n                <p className=\"output\">{this.state.output}</p>\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MersenneFast","C:\\Users\\Admin\\Desktop\\my-app\\src\\components\\Mersenne.js",["25"],"import React, { Component, useState } from \"react\"\nimport '../myStyle.css'\n\nclass Mersenne extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            num: 2,\n            output: \"Waiting on input...\"\n        };\n    }\n\n    mersennePrime = (props) => {\n        const num=this.state.num;\n        //alert(\"This is a very slow algorithm\");\n        var p1 = num\n        //error checking\n        if (p1 > 30)\n        {\n            this.setState({\n                output: \"Input is too large! Please use n <= 30 due to computational limits.\"\n            });\n            return; \n        }\n\n        if(p1 < 2)\n        {\n            this.setState({\n                output: \"Please enter an n >= 2.\"\n            });\n            return; \n        }\n        //computation\n        p1 = Math.pow(2, p1) -1;\n        for(let i = 2, s = Math.sqrt(p1); i <= s; i++) {\n          if(p1 % i === 0){\n            this.setState({\n                output: String(num)+\" is not a mersenne prime!\"\n            });\n            return;\n          }\n        }\n        this.setState({\n            output: String(num)+\" is a mersenne prime!\"\n        });\n        return;\n    }\n\n    handleChange = (event) => {\n        this.setState({num: event.target.value});\n    }\n\n    render() {\n        return (\n            <div>\n                <p className=\"output\">This is done using Sieve of Eratosthenes algorithm</p>\n                <p className=\"notice\"><u>Please note!</u> This algorithm will only accept n less than 31, due to react's computation of numbers.</p>\n                <p className=\"output\"> Number being computed: 2<sup>{this.state.num}</sup>-1</p>\n                <input className = \"input\"\n                    defaultValue={2}\n                    type=\"number\"\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                    min=\"2\"\n                />\n                <button className =\"input\" onClick = {this.mersennePrime}>Begin computation</button>\n                <p className=\"output\">{this.state.output}</p>\n            </div>\n        )\n    }\n}\n\nexport default Mersenne","C:\\Users\\Admin\\Desktop\\my-app\\src\\App.js",["26"],"C:\\Users\\Admin\\Desktop\\my-app\\src\\reportWebVitals.js",[],{"ruleId":"27","severity":1,"message":"28","line":1,"column":28,"nodeType":"29","messageId":"30","endLine":1,"endColumn":36},{"ruleId":"27","severity":1,"message":"28","line":1,"column":28,"nodeType":"29","messageId":"30","endLine":1,"endColumn":36},{"ruleId":"31","severity":1,"message":"32","line":54,"column":15,"nodeType":"33","endLine":54,"endColumn":128},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]